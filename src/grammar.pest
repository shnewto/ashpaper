
program = {
    goto
    | negate
    | multiply
    | add
    | print_value
    | print_register
    | pop
    | push
    | noop
    | store_syllables
}

cul = _{ character ~ uppercase_letter}
any_not_cul = _{ !cul ~ any }

tc = _{ whitespace ~ uppercase_letter }
any_not_tc = _{ !tc ~ any }

goto  = { start ~ any_not_forward_slash* ~ "/" ~ any* ~ end }
negate = { start ~ any_not_cul* ~ cul ~ any* ~ end }
multiply = { start ~ (uppercase_letter | (any_not_tc* ~ tc)) ~ any* ~ end }
add = { the_word_like | the_word_as }
print_value =  { start ~ any_not_question* ~ "?" ~ any* ~ end }
print_register =  { start ~ any_not_period* ~ "." ~ any* ~ end }
pop =  { start ~ any_not_comma* ~ "," ~ any* ~ end }
push =  { start ~ any_not_hyphen* ~ "-" ~ any* ~ end }
noop = { start ~ end }
store_syllables =  { start ~ any* ~ end }

words_followed_by_spaces = { whitespace | (character+ ~ whitespace) }

start_no_whitespace = { SOI }

uppercase_letter = { UPPERCASE_LETTER }
any_not_uppercase_letter = { !uppercase_letter ~ any}

forward_slash = { "/" }
any_not_forward_slash = { !forward_slash ~ any }

comma = { "," }
any_not_comma = { !comma ~ any }

period = { "." }
any_not_period = { !period ~ any }

question = { "?" }
any_not_question = { !question ~ any }

hyphen = { "-" }
any_not_hyphen = { !hyphen ~ any }

character = { LETTER | MARK | NUMBER | PUNCTUATION | SYMBOL }
start = { SOI ~ whitespace*  }
end = { whitespace* ~ EOI }
any_not_character = { !character ~ any }
any_not_uppercase_letter_character = { !uppercase_letter ~ character}

whitespace = { " " | "\t" }
any = { ANY }

the_word_like = { like_only | like_first | like_last | like_else }
the_word_as = { as_only | as_first | as_last | as_else }

any_character_not_uppercase = { !uppercase_letter ~ character }
word_followed_by_space = { character+ ~ whitespace+ }


like_only = { start ~ "like" ~ end }
like_first = { start ~ "like" ~ any_not_character* ~ any* ~ end }
like_last = { start ~ any* ~ any_not_character* ~ "like" ~ end }
like_else = { start ~ any* ~ any_not_character* ~ "like" ~ any_not_character* ~ any* ~ end }

as_only = { start ~ "as" ~ end }
as_first = { start ~ "as" ~ any_not_character* ~ any* ~ end }
as_last = { start ~ any* ~ any_not_character* ~ "as" ~ end }
as_else = { start ~ any* ~ any_not_character* ~ "as" ~ any_not_character* ~ any* ~ end }