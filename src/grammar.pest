
program = {
    (register1 | register0)  ~
    (goto
    | negate
    | multiply
    | add
    | print_value
    | print_register
    | pop
    | push
    | noop
    | store_syllables)
}

goto  = { any_not_forward_slash* ~ "/" ~ any* ~ end }
negate = { any_not_cul* ~ cul ~ any* ~ end }
multiply = { (uppercase_letter | (any_not_tc* ~ tc)) ~ any* ~ end }
add = { the_word_like | the_word_as }
print_value =  { any_not_question* ~ "?" ~ any* ~ end }
print_register =  { any_not_period* ~ "." ~ any* ~ end }
pop =  { any_not_comma* ~ "," ~ any* ~ end }
push =  { any_not_hyphen* ~ "-" ~ any* ~ end }
noop = { end }
store_syllables =  { any* ~ end }

register1 = { SOI ~ whitespace+ }
register0 = { SOI }

cul = _{ character ~ uppercase_letter}
any_not_cul = _{ !cul ~ any }

tc = _{ whitespace ~ uppercase_letter }
any_not_tc = _{ !tc ~ any }

forward_slash = _{ "/" }
any_not_forward_slash = _{ !forward_slash ~ any }

comma = _{ "," }
any_not_comma = _{ !comma ~ any }

period = _{ "." }
any_not_period = _{ !period ~ any }

question = _{ "?" }
any_not_question = _{ !question ~ any }

hyphen = _{ "-" }
any_not_hyphen = _{ !hyphen ~ any }

character = _{ LETTER | MARK | NUMBER | PUNCTUATION | SYMBOL }

end = _{ whitespace* ~ EOI }
any_not_character = _{ !character ~ any }
uppercase_letter = _{ UPPERCASE_LETTER }

whitespace = _{ " " | "\t" }
any = _{ ANY }

the_word_like = _{ like_only | like_first | like_last | like_else }
the_word_as = _{ as_only | as_first | as_last | as_else }

any_character_not_uppercase = _{ !uppercase_letter ~ character }
word_followed_by_space = _{ character+ ~ whitespace+ }


like_only = _{ "like" ~ end }
like_first = _{ "like" ~ any_not_character* ~ any* ~ end }
like_last = _{ any* ~ any_not_character* ~ "like" ~ end }
like_else = _{ any* ~ any_not_character* ~ "like" ~ any_not_character* ~ any* ~ end }

as_only = _{ "as" ~ end }
as_first = _{ "as" ~ any_not_character* ~ any* ~ end }
as_last = _{ any* ~ any_not_character* ~ "as" ~ end }
as_else = _{ any* ~ any_not_character* ~ "as" ~ any_not_character* ~ any* ~ end }